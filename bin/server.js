import Koa from 'koa'
import bodyParser from 'koa-bodyparser'
import convert from 'koa-convert'
import logger from 'koa-logger'
import mongoose from 'mongoose'
import session from 'koa-generic-session'
import passport from 'koa-passport'
import mount from 'koa-mount'
import serve from 'koa-static'
import helmet from 'koa-helmet'
import config from '../config'
import { errorMiddleware } from '../src/middleware'

const app = new Koa()
app.keys = [config.session]

// --------------------- start -------------------------
// Instead of calling convert for all legacy middlewares
// just use the following to convert them all at once

const _use = app.use
app.use = x => _use.call(app, convert(x))

// The code above avoids writting the following
// app.use(convert(logger()))
// ---------------------- end --------------------------

mongoose.Promise = global.Promise
mongoose.connect(config.database)

app.use(helmet())
app.use(logger())
app.use(bodyParser())
app.use(session())
app.use(errorMiddleware())

// Mount static API documents generated by api-generator
app.use(mount('/docs', serve(`${process.cwd()}/docs`)))

// Using Passport for authentication
require('../config/passport')
app.use(passport.initialize())
app.use(passport.session())

// Routing
const modules = require('../src/modules/v1')
modules(app)

app.listen(config.port, () => {
	console.log(`Server started on ${config.port}`)
})

export default app
